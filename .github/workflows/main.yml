name: Build
on:
  push:
    branches:
      - master

  pull_request:
    branches:
      - master

jobs:
  lint-and-test:
    strategy:
      matrix:
        go_version:
          - 1.12.x
          - 1.13.x

    name: lint-and-test (go ${{ matrix.go_version }})
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-go@v1.0.2
        id: go
        with:
          go-version: ${{ matrix.go_version }}

      - uses: actions/checkout@v1.0.0

      - name: install deps
        run: |
          go mod download
          (
            cd /tmp
            env GO111MODULE=on go get github.com/golangci/golangci-lint/cmd/golangci-lint@latest
          )
        env:
          GOPROXY: https://proxy.golang.org

      - name: run-linter
        run: |
          $(go env GOPATH)/bin/golangci-lint run
        env:
          GOPROXY: off
          GOFLAGS: -mod=readonly

      - name: run-tests
        run: go test -race -vet all -mod readonly ./...
        env:
          GOPROXY: off

  build:
    name: build-and-publish
    runs-on: ubuntu-latest
    needs: lint-and-test
    steps:
      - uses: actions/checkout@v1.0.0

      - uses: actions/setup-go@v1.0.2
        id: go
        with:
          go-version: 1.13.x

      - name: go-build
        run: go build -o fake-gcs-server -mod readonly
        env:
          CGO_ENABLED: 0
          GOPROXY: https://proxy.golang.org,https://gocenter.io,direct

      - name: sanity-check
        uses: docker://alpine
        with:
          entrypoint: sh
          args: -c "./fake-gcs-server -h"

      - name: test-python-example
        uses: docker://python:3-alpine
        with:
          entrypoint: sh
          args: ci/run-python-example.sh

      - name: test-go-example
        uses: docker://golang:1.13-alpine
        env:
          GOROOT: /usr/local/go
        with:
          entrypoint: sh
          args: ci/run-go-example.sh

      - name: docker-publish
        uses: docker://docker
        env:
          DOCKER_USERNAME: ${{ secrets.docker_username }}
          DOCKER_PASSWORD: ${{ secrets.docker_password }}
        with:
          entrypoint: sh
          args: ci/docker-build.sh
