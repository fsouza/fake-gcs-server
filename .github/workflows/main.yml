name: Build
on:
  push:
    branches:
      - main

  pull_request:
    branches:
      - main

jobs:
  lint-and-test:
    strategy:
      matrix:
        go_version:
          - 1.13
          - 1.14
        os:
          - macos
          - ubuntu
          - windows

    name: lint-and-test (${{ matrix.os }}/go-${{ matrix.go_version }})
    runs-on: ${{ matrix.os }}-latest
    steps:
      - uses: actions/setup-go@v2.1.0
        id: go
        with:
          stable: false
          go-version: ${{ matrix.go_version }}

      - uses: actions/checkout@v2.3.1

      - name: install deps
        run: go mod download

      - name: run-tests
        run: go test -race -vet all -mod readonly ./...
        env:
          GOPROXY: off

      - name: install golangci-lint
        run: go get github.com/golangci/golangci-lint/cmd/golangci-lint@latest
        working-directory: /
        env:
          GO111MODULE: on

      - name: run-linter
        run: golangci-lint run
        env:
          GOPROXY: off
          GOFLAGS: -mod=readonly

  build:
    name: build-and-publish
    runs-on: ubuntu-latest
    needs: lint-and-test
    steps:
      - uses: actions/checkout@v2.3.1

      - uses: actions/setup-go@v2.1.0
        id: go
        with:
          go-version: 1.x

      - name: go-build
        run: go build -o fake-gcs-server -mod readonly
        env:
          CGO_ENABLED: 0

      - name: sanity-check
        uses: docker://alpine
        with:
          entrypoint: sh
          args: -c "./fake-gcs-server -h"

      - name: test-python-example
        uses: docker://python:3-alpine
        with:
          entrypoint: sh
          args: ci/run-python-example.sh

      - name: test-node-example
        uses: docker://node:14-alpine
        with:
          entrypoint: sh
          args: ci/run-node-example.sh

      - name: test-go-example
        uses: docker://golang:1.14-alpine
        env:
          GOROOT: /usr/local/go
        with:
          entrypoint: sh
          args: ci/run-go-example.sh

      - name: docker-publish
        uses: docker://docker
        env:
          DOCKER_USERNAME: ${{ secrets.docker_username }}
          DOCKER_PASSWORD: ${{ secrets.docker_password }}
        with:
          entrypoint: sh
          args: ci/docker-build.sh
